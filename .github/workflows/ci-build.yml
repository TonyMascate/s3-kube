name: CI/CD - Test, Build, Deploy (Minikube + Chat)

permissions:
  contents: read
  packages: write

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Start services (MinIO via docker-compose)
        uses: docker/setup-compose-action@v1

      - run: docker compose -f docker-compose.yml up -d

      - name: Run Go tests
        run: go test ./... -v
        env:
          MINIO_ENDPOINT: "localhost:9000"
          MINIO_ACCESS_KEY: "minioadmin"
          MINIO_SECRET_KEY: "miniopassword"

      - if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans

  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: vars
        name: Determine image tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="latest"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/mys3:${{ steps.vars.outputs.tag }}
            ghcr.io/${{ github.repository_owner }}/mys3:${{ github.sha }}

  deploy-to-minikube:
    name: Deploy to local Minikube
    runs-on: [minikube-runner] # ton runner local
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Ensure Minikube is running
        run: |
          echo "üîç V√©rification de Minikube..."
          minikube status || minikube start --driver=docker

      - name: Load image into Minikube
        run: |
          echo "üì¶ Chargement de l'image dans Minikube..."
          minikube image pull ghcr.io/${{ github.repository_owner }}/mys3:${{ github.sha }}

      - name: Apply Kubernetes manifests
        run: |
          echo "üöÄ D√©ploiement de k8s/k8s-all.yaml..."
          kubectl apply -f k8s/k8s-all.yaml

          echo "üîÑ Mise √† jour de l'image de mys3-deployment..."
          kubectl set image deployment/mys3-deployment mys3=ghcr.io/${{ github.repository_owner }}/mys3:${{ github.sha }}

          echo "‚è≥ Attente du d√©ploiement..."
          kubectl rollout status deployment/mys3-deployment

      - name: Verify deployed services
        run: |
          echo "‚úÖ V√©rification du d√©ploiement :"
          kubectl get pods
          kubectl get svc

  notify:
    name: Notify Google Chat
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy-to-minikube]
    if: always()
    steps:
      - name: Send notification
        env:
          WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          STATUS: ${{ job.status }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          COMMIT: ${{ github.sha }}
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          if [ "$STATUS" = "success" ]; then
            COLOR="#34a853"
            EMOJI="‚úÖ"
            MESSAGE="La pipeline CI/CD s'est termin√©e avec succ√®s üéâ"
          else
            COLOR="#ea4335"
            EMOJI="‚ùå"
            MESSAGE="La pipeline CI/CD a √©chou√© üö®"
          fi

          cat <<EOF > payload.json
          {
            "cards": [{
              "header": {
                "title": "$EMOJI  Pipeline CI/CD - $REPO",
                "subtitle": "$MESSAGE",
                "imageUrl": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "sections": [{
                "widgets": [
                  {"keyValue": {"topLabel": "Statut", "content": "$STATUS"}},
                  {"keyValue": {"topLabel": "Auteur", "content": "$ACTOR"}},
                  {"keyValue": {"topLabel": "Commit", "content": "$COMMIT"}},
                  {"buttons": [{
                    "textButton": {
                      "text": "VOIR LE RUN DANS GITHUB ACTIONS",
                      "onClick": {"openLink": {"url": "$RUN_URL"}}
                    }
                  }]}
                ]
              }]
            }]
          }
          EOF

          curl -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK_URL"
